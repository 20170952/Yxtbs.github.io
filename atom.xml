<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://20170952.github.io/Yxtbs.github.io/</id>
    <title>糖不甩</title>
    <updated>2021-10-19T01:19:26.508Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://20170952.github.io/Yxtbs.github.io/"/>
    <link rel="self" href="https://20170952.github.io/Yxtbs.github.io/atom.xml"/>
    <subtitle>长存不灭的过去，逐渐消逝的未来</subtitle>
    <logo>https://20170952.github.io/Yxtbs.github.io/images/avatar.png</logo>
    <icon>https://20170952.github.io/Yxtbs.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 糖不甩</rights>
    <entry>
        <title type="html"><![CDATA[CF1004C题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf1004c-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf1004c-ti-jie/">
        </link>
        <updated>2021-10-19T01:09:17.000Z</updated>
        <summary type="html"><![CDATA[<p>Codeforces Round #495 (Div. 2)</p>
]]></summary>
        <content type="html"><![CDATA[<p>Codeforces Round #495 (Div. 2)</p>
<!-- more -->
<h1 id="csonya-and-robots">C.Sonya and Robots</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">1400</mn></mrow><annotation encoding="application/x-tex">\mathtt{1400}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">1</span><span class="mord mathtt">4</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
这道题目唯一的问题就是如何去重。<br>
首先，对于数列中两个相同的数，<br>
前面元素所成的数对，<br>
后面元素一定都能造出。<br>
那么我们就有了一个思路，<br>
相同的数只需要算最后一个，<br>
而前面的显然全部重复。<br>
可以使用 set 维护，<br>
然后代码就不难写出了。</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
#define int long long
#define MAX 100001
int N,Ret,A[MAX],Cnt[MAX];
set&lt; int &gt;Set;
signed main(void)
{
	BetterIO;
	register int i;cin&gt;&gt;N;
	for(i=1;i&lt;=N;i++)cin&gt;&gt;A[i];
	for(i=1;i&lt;=N;i++)Ret-=Cnt[A[i]],Ret+=(Cnt[A[i]]=Set.size()),Set.insert(A[i]);
	cout&lt;&lt;Ret&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF1304E题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf1304e-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf1304e-ti-jie/">
        </link>
        <updated>2021-10-19T01:00:59.000Z</updated>
        <summary type="html"><![CDATA[<p>Codeforces Round #620 (Div. 2)</p>
]]></summary>
        <content type="html"><![CDATA[<p>Codeforces Round #620 (Div. 2)</p>
<!-- more -->
<h1 id="e1-trees-and-queries">E.1-Trees and Queries</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">2000</mn></mrow><annotation encoding="application/x-tex">\mathtt{2000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">2</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
这道题目其实并没有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">2000</mn></mrow><annotation encoding="application/x-tex">\mathtt{2000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">2</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span> 的难度。<br>
对于每一次询问，我们不妨进行分类讨论：</p>
<ul>
<li>在原有的路径上走过去。</li>
<li>利用新增的边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 走过去。</li>
</ul>
<p>首先对于第一种情况，<br>
我们显然是进行树上差分，即：<br>
<code>Dist(X,Y)=Deep[X]+Deep[Y]-(Deep[GetLCA(X,Y)]&lt;&lt;1)</code>。<br>
而对于后一种情况，<br>
我们不难想到是  <code>Dist(A,X)+Dist(B,Y)+1</code>，<br>
或是 <code>Dist(A,Y)+Dist(B,X)+1</code>。<br>
那么代码不难写出。</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
#define MAX 100001
struct Struct{int To,Next;}Edge[MAX&lt;&lt;1];
int N,Head[MAX],Deep[MAX],Jump[MAX][21],Count;
inline void AddEdge(int U,int V){Edge[Count].To=V,Edge[Count].Next=Head[U],Head[U]=Count++;}
inline void Dfs(int Now,int Father)
{
    register int i;
    Deep[Now]=Deep[Father]+1,Jump[Now][0]=Father;
    for(i=1;(1&lt;&lt;i)&lt;=Deep[Now];i++)Jump[Now][i]=Jump[Jump[Now][i-1]][i-1];
    for(i=Head[Now];~i;i=Edge[i].Next)
    {	
        register int To(Edge[i].To);
        if(To!=Father)Dfs(To,Now);
    }
}    
inline int GetLCA(int A,int B)
{
    if(Deep[A]&gt;Deep[B])swap(A,B);
    register int i;
    for(i=20;i&gt;=0;i--)if(Deep[A]&lt;=Deep[B]-(1&lt;&lt;i))B=Jump[B][i];
    if(A==B)return A;
    for(i=20;i&gt;=0;i--)
    {
        if(Jump[A][i]==Jump[B][i])continue;
        A=Jump[A][i],B=Jump[B][i];
    }
    return Jump[A][0];
}
inline int Dist(int X,int Y){return Deep[X]+Deep[Y]-2*Deep[GetLCA(X,Y)];}
int main(void)
{
	BetterIO;
	register int i;cin&gt;&gt;N;
	memset(Head,-1,sizeof(Head));
	for(i=1;i&lt;N;i++)
	{
		register int U,V;cin&gt;&gt;U&gt;&gt;V;
		AddEdge(U,V);
		AddEdge(V,U);
	}
	Dfs(1,0);
	register int Q;cin&gt;&gt;Q;while(Q--)
	{
		register int X,Y,A,B,K;cin&gt;&gt;X&gt;&gt;Y&gt;&gt;A&gt;&gt;B&gt;&gt;K;
		register int D1(Dist(A,B)),D2(Dist(A,X)+Dist(B,Y)+1),D3(Dist(A,Y)+Dist(B,X)+1);
		if((K&gt;=D1&amp;&amp;!((K-D1)%2))||(K&gt;=D2&amp;&amp;!((K-D2)%2))||(K&gt;=D3&amp;&amp;!((K-D3)%2)))puts(&quot;YES&quot;);
		else puts(&quot;NO&quot;);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF578B题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf578b-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf578b-ti-jie/">
        </link>
        <updated>2021-10-18T14:53:16.000Z</updated>
        <summary type="html"><![CDATA[<p>Codeforces Round #320 (Div. 1) [Bayan Thanks-Round]</p>
]]></summary>
        <content type="html"><![CDATA[<p>Codeforces Round #320 (Div. 1) [Bayan Thanks-Round]</p>
<!-- more -->
<h1 id="bor-game">B.&quot;Or&quot; Game</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">1700</mn></mrow><annotation encoding="application/x-tex">\mathtt{1700}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">1</span><span class="mord mathtt">7</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
不难发现，将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">x^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 乘在同一个数上一定最优。<br>
首先我们有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><msup><mi>n</mi><mn mathvariant="script">2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O(n^2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathcal mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span> 的暴力算法。<br>
于是我们考虑如何优化。<br>
因为每次变化的只有一个数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<br>
所以我们不妨记录前缀或和后缀或，<br>
然后枚举 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>×</mo><msup><mi>x</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">a_i\times x^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 即可得到答案。<br>
即：<code>Ans=max(Ans,(A[i]*Ret)|Pre[i-1]|Nxt[i+1])</code></p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
#define int long long
int N,K,X,A[200001],Pre[200001],Nxt[200001];
signed main(void)
{
	register int i;cin&gt;&gt;N&gt;&gt;K&gt;&gt;X;
	for(i=1;i&lt;=N;i++)cin&gt;&gt;A[i];
	register int Ret=1;
	while(K--)Ret*=X;
	for(i=1;i&lt;=N;i++)Pre[i]=Pre[i-1]|A[i];
	for(i=N;i&gt;=1;i--)Nxt[i]=Nxt[i+1]|A[i];
	register int Ans=0;
	for(i=1;i&lt;=N;i++)Ans=max(Ans,(A[i]*Ret)|Pre[i-1]|Nxt[i+1]);
	cout&lt;&lt;Ans&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF1055E题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf1055e-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf1055e-ti-jie/">
        </link>
        <updated>2021-10-18T14:44:40.000Z</updated>
        <summary type="html"><![CDATA[<p>Mail.Ru Cup 2018 Round 2</p>
]]></summary>
        <content type="html"><![CDATA[<p>Mail.Ru Cup 2018 Round 2</p>
<!-- more -->
<h1 id="esegments-on-the-line">E.Segments on the Line</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">2500</mn></mrow><annotation encoding="application/x-tex">\mathtt{2500}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">2</span><span class="mord mathtt">5</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
不难想到二分答案 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，验证是否有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个及以上个的值小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>。<br>
对于这个问题，我们考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">dp</mtext></mrow><annotation encoding="application/x-tex">\texttt{dp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord text"><span class="mord texttt">dp</span></span></span></span></span>。<br>
不妨设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">dp_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 表示前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个点已经选择了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 条线段。<br>
转移考虑要么直接与上一个段重叠，要么不重叠（忽略包含的情况，因为这只意味着可以选择少于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 段）。<br>
重叠的情况下，选择上一个段显然是最优的。<br>
不重叠的情况下，直接找包含这个点的左端点最左显然是最优的。</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
int N,M,S,K,A[10001],L[10001],R[10001],Dp[5001][5001];
inline bool Check(int X)
{
	register int i,j;memset(Dp,0,sizeof(Dp));
	for(i=1;i&lt;=N;i++)
	{
		register int Last(i+1),Sum(0);
		for(j=1;j&lt;=M;j++)if(L[j]&lt;=i&amp;&amp;R[j]&gt;=i)Last=min(Last,L[j]);
		for(j=Last;j&lt;=i;j++)Sum+=(A[j]&lt;=X);
		for(j=1;j&lt;=S;j++)Dp[i][j]=max(Dp[i-1][j],Dp[Last-1][j-1]+Sum);
	}
	return Dp[N][S]&gt;=K;
}
int main(void)
{
	BetterIO;
	register int i;cin&gt;&gt;N&gt;&gt;M&gt;&gt;S&gt;&gt;K;
	for(i=1;i&lt;=N;i++)cin&gt;&gt;A[i];
	for(i=1;i&lt;=M;i++)cin&gt;&gt;L[i]&gt;&gt;R[i];
	register int Left(1),Right(1000000000),Ans=-1;
	while(Left&lt;=Right)
	{
		register int Middle=Left+Right&gt;&gt;1;
		if(Check(Middle))Ans=Middle,Right=Middle-1;
		else Left=Middle+1;
	}
	cout&lt;&lt;Ans&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF574B题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf574b-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf574b-ti-jie/">
        </link>
        <updated>2021-10-12T05:55:39.000Z</updated>
        <summary type="html"><![CDATA[<p>Codeforces Round #318 [RussianCodeCup Thanks-Round] (Div. 2)</p>
]]></summary>
        <content type="html"><![CDATA[<p>Codeforces Round #318 [RussianCodeCup Thanks-Round] (Div. 2)</p>
<!-- more -->
<h1 id="bbear-and-three-musketeers">B.Bear and Three Musketeers</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">1500</mn></mrow><annotation encoding="application/x-tex">\mathtt{1500}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">1</span><span class="mord mathtt">5</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
<s>使用暴力可以通过本题。</s><br>
我们考虑暴力枚举 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个点，<br>
条件为两两之间都有连边，<br>
然后取这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个点的度数之和的最小值。<br>
因为不包括这 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个点本身，<br>
所以最终答案还要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">-6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">6</span></span></span></span>。<br>
<strong>但是</strong>，<br>
这样写会得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">TLE</mtext></mrow><annotation encoding="application/x-tex">\texttt{TLE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">TLE</span></span></span></span></span>，<br>
不难想到一个基础的剪枝，<br>
就是如果选的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 个点已经没有连边，<br>
就直接 <code>break</code> 掉。<br>
代码就不难写出了。</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
int N,M,Deg[4001];
bool Map[4001][4001];
int main(void)
{
	BetterIO;
	register int i,j,k;cin&gt;&gt;N&gt;&gt;M;
	for(i=1;i&lt;=M;i++)
	{
		register int U,V;cin&gt;&gt;U&gt;&gt;V;
		Map[U][V]=Map[V][U]=true,Deg[U]++,Deg[V]++;
	}
	register int Ret(INT_MAX);
	for(i=1;i&lt;=N;i++)for(j=i+1;j&lt;=N;j++)if(Map[i][j])for(k=j+1;k&lt;=N;k++)if(Map[i][j]&amp;&amp;Map[i][k]&amp;&amp;Map[j][k])Ret=min(Ret,Deg[i]+Deg[j]+Deg[k]);
	if(Ret==INT_MAX)Ret=5;
	cout&lt;&lt;Ret-6&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF965D题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf965d-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf965d-ti-jie/">
        </link>
        <updated>2021-10-12T05:52:40.000Z</updated>
        <summary type="html"><![CDATA[<p>Codeforces Round #476 (Div. 2) [Thanks, Telegram!]</p>
]]></summary>
        <content type="html"><![CDATA[<p>Codeforces Round #476 (Div. 2) [Thanks, Telegram!]</p>
<!-- more -->
<h1 id="dsingle-use-stones">D.Single-use Stones</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">1900</mn></mrow><annotation encoding="application/x-tex">\mathtt{1900}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">1</span><span class="mord mathtt">9</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
先说结论：</p>
<blockquote>
<p>最多通过的青蛙的数量就是每个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 的区间中石头数量的最小值。</p>
</blockquote>
<p>我们考虑一段长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 的区间，<br>
因为青蛙最多跳 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 的距离，<br>
不难想到，每只青蛙都一定会在这个区间落下至少一次。<br>
因为一定可以从另一个石子数大于等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的区间跳过来，<br>
所以这样取出的答案是可行的。<br>
那么我们就得到了结论：</p>
<blockquote>
<p>最多通过的青蛙的数量就是每个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 的区间中石头数量的最小值。</p>
</blockquote>
<p>代码就不难写出了。</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
int W,L,A[100001],Prefix[100001];
int main(void)
{
	BetterIO;
	register int i;cin&gt;&gt;W&gt;&gt;L;
	for(i=1;i&lt;W;i++)cin&gt;&gt;A[i];
	for(i=1;i&lt;W;i++)Prefix[i]=Prefix[i-1]+A[i];
	register int Ret(INT_MAX);
	for(i=0;i+L&lt;W;i++)Ret=min(Ret,Prefix[i+L]-Prefix[i]);
	cout&lt;&lt;Ret&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF1147C题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf1147c-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf1147c-ti-jie/">
        </link>
        <updated>2021-08-27T22:43:27.000Z</updated>
        <summary type="html"><![CDATA[<p>Forethought Future Cup - Final Round (Onsite Finalists Only)</p>
]]></summary>
        <content type="html"><![CDATA[<p>Forethought Future Cup - Final Round (Onsite Finalists Only)</p>
<!-- more -->
<h1 id="cthanos-nim">C.Thanos Nim</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">2000</mn></mrow><annotation encoding="application/x-tex">\mathtt{2000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">2</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
先说结论：</p>
<blockquote>
<p>如果石子最小堆数量不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 时，先手必胜，反之后手必胜</p>
</blockquote>
<p>如果石子最小堆数量超过了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，<br>
那么先手无论怎么选，<br>
一定会选到一些最小堆，<br>
这就会使得最小堆的数量减少<br>
然后后手不妨将其余的非最小堆的一部分变成最小堆，<br>
但是当最小堆数量变为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，<br>
而剩余堆超过  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 时，<br>
再操作一次即可获胜，<br>
经过观察可知最后胜利者一定是后手<br>
那么我们就得到了结论：</p>
<blockquote>
<p>如果石子最小堆数量不超过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 时，先手必胜，反之后手必胜</p>
</blockquote>
<p>代码就不难写出了</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
int N,A[1001];
int main(void)
{
	BetterIO;
	#ifndef ONLINE_JUDGE
	freopen(&quot;IN.in&quot;,&quot;r&quot;,stdin);
	#endif
	register int i;cin&gt;&gt;N;
	for(i=1;i&lt;=N;i++)cin&gt;&gt;A[i];
	sort(A+1,A+N+1);
	if(A[1]!=A[N/2+1])puts(&quot;Alice&quot;);
	else puts(&quot;Bob&quot;);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P2893题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/p2893-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/p2893-ti-jie/">
        </link>
        <updated>2021-08-26T10:10:29.000Z</updated>
        <summary type="html"><![CDATA[<p>Luogu P2893</p>
]]></summary>
        <content type="html"><![CDATA[<p>Luogu P2893</p>
<!-- more -->
<h1 id="p2893usaco08febmaking-the-grade-g">P2893.[USACO08FEB]Making the Grade G</h1>
<p>这道题目我们可以考虑直接上 STL<br>
我们一个数一个数地放进一个大根堆(优先队列)<br>
其实就是算到当前数时<br>
取前面最大的数出来<br>
假如现在这个数比前面最大数大或相等就没事<br>
反之我们则需要考虑如何改为不降<br>
我们肯定是将大的往小移，将小的往大移<br>
那么花费一定是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|a-b|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span></span></span></span><br>
为了不影响先前的答案<br>
当然都是移到同一基准<br>
即是先前的最大数<br>
代码不难写出</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
long long Total;
priority_queue&lt; long long &gt;Queue;
int main(void)
{
	BetterIO;
	register long long i;cin&gt;&gt;Total;
	register long long Ans(0);
	for(i=1;i&lt;=Total;i++)
	{
		register long long Now;cin&gt;&gt;Now;
		Queue.push(Now);
		if(Queue.top()&gt;Now)
		{
			Ans+=Queue.top()-Now;
			Queue.pop();
			Queue.push(Now);
		}
	}
	cout&lt;&lt;Ans&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P4597题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/p4597-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/p4597-ti-jie/">
        </link>
        <updated>2021-08-26T10:10:14.000Z</updated>
        <summary type="html"><![CDATA[<p>Luogu P4597</p>
]]></summary>
        <content type="html"><![CDATA[<p>Luogu P4597</p>
<!-- more -->
<h1 id="p4597序列sequence">P4597.序列sequence</h1>
<p>这道题目我们可以考虑直接上 STL<br>
我们一个数一个数地放进一个大根堆(优先队列)<br>
其实就是算到当前数时<br>
取前面最大的数出来<br>
假如现在这个数比前面最大数大或相等就没事<br>
反之我们则需要考虑如何改为不降<br>
我们肯定是将大的往小移，将小的往大移<br>
那么花费一定是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|a-b|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span></span></span></span><br>
为了不影响先前的答案<br>
当然都是移到同一基准<br>
即是先前的最大数<br>
代码不难写出</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
long long Total;
priority_queue&lt; long long &gt;Queue;
int main(void)
{
	BetterIO;
	register long long i;cin&gt;&gt;Total;
	register long long Ans(0);
	for(i=1;i&lt;=Total;i++)
	{
		register long long Now;cin&gt;&gt;Now;
		Queue.push(Now);
		if(Queue.top()&gt;Now)
		{
			Ans+=Queue.top()-Now;
			Queue.pop();
			Queue.push(Now);
		}
	}
	cout&lt;&lt;Ans&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF713C题解]]></title>
        <id>https://20170952.github.io/Yxtbs.github.io/post/cf713c-ti-jie/</id>
        <link href="https://20170952.github.io/Yxtbs.github.io/post/cf713c-ti-jie/">
        </link>
        <updated>2021-08-26T10:10:04.000Z</updated>
        <summary type="html"><![CDATA[<p>Codeforces Round #371 (Div. 1)</p>
]]></summary>
        <content type="html"><![CDATA[<p>Codeforces Round #371 (Div. 1)</p>
<!-- more -->
<h1 id="csonya-and-problem-wihtout-a-legend">C.Sonya and Problem Wihtout a Legend</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="monospace">D</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">u</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">y</mi></mrow><annotation encoding="application/x-tex">\mathtt{Difficulty}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">D</span><span class="mord mathtt">i</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">i</span><span class="mord mathtt">c</span><span class="mord mathtt">u</span><span class="mord mathtt">l</span><span class="mord mathtt">t</span><span class="mord mathtt">y</span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn mathvariant="monospace">2300</mn></mrow><annotation encoding="application/x-tex">\mathtt{2300}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord mathtt">2</span><span class="mord mathtt">3</span><span class="mord mathtt">0</span><span class="mord mathtt">0</span></span></span></span></span><br>
这道题目我们可以考虑直接上 STL<br>
我们一个数一个数地放进一个大根堆(优先队列)<br>
其实就是算到当前数时<br>
取前面最大的数出来<br>
假如现在这个数比前面最大数大或相等就没事<br>
反之我们则需要考虑如何改为不降<br>
我们肯定是将大的往小移，将小的往大移<br>
那么花费一定是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>a</mi><mo>−</mo><mi>b</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|a-b|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord">∣</span></span></span></span><br>
为了不影响先前的答案<br>
当然都是移到同一基准<br>
即是先前的最大数<br>
代码不难写出</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
#define BetterIO ios::sync_with_stdio(false)
using namespace std;
long long Total;
priority_queue&lt; long long &gt;Queue;
int main(void)
{
	BetterIO;
	#ifndef ONLINE_JUDGE
	freopen(&quot;IN.in&quot;,&quot;r&quot;,stdin);
	#endif
	register long long i;cin&gt;&gt;Total;
	register long long Ans(0);
	for(i=1;i&lt;=Total;i++)
	{
		register long long Now;cin&gt;&gt;Now,Now-=i;
		Queue.push(Now);
		if(Queue.top()&gt;Now)
		{
			Ans+=Queue.top()-Now;
			Queue.pop();
			Queue.push(Now);
		}
	}
	cout&lt;&lt;Ans&lt;&lt;endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>